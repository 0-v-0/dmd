Ddoc

$(COMMENT Pending changelog for 2.071. This will get copied to dlang.org and
    cleared when master gets merged into stable.
)

$(BUGSTITLE Compiler Changes,
    $(LI $(RELATIVE_LINK2 imports-313, Import access checks for fully qualified names were fixed.))
)

$(BUGSTITLE Language Changes,
    $(LI $(RELATIVE_LINK2 extended-deprecated, Manifest constant can now be used for deprecation message.))
    $(LI $(RELATIVE_LINK2 import-lookup, Imports no longer hide locals declared in outer scopes.))
)

$(BUGSTITLE Compiler Changes,
    $(LI $(LNAME2 imports-313, Import access checks for fully qualified names were fixed.)

    $(P It is no longer possible to bypass private imports by using fully qualified names, e.g.
        the following example will fail with `package std.range is not accessible here`.
    )

    ---
    import std.algorithm;

    static assert(std.range.isForwardRange!string);
    ---

    $(P To ease updating existing code, the old behavior was retained but deprecated.
    )
    )
)

$(BUGSTITLE Language Changes,
    $(LI $(LNAME2 extended-deprecated, Manifest constant can now be used for deprecation message.)

    $(P Manifest constants (enum, static immutable) can now be used for deprecation message, as well as concatenated strings.)
    $(P Example:)
    ---
    string generateMessage() { return "Some deprecation message"; }
    enum DepMsg = generateMessage();

    deprecated(DepMsg) class Foo {}
    deprecated("Some long deprecation " ~ "message") class Bar {}
    ---
    )

    $(LI $(LNAME2 import-lookup, Imports no longer hide locals declared in outer scopes.)

    $(P These changes were made to the name lookup algorithm:

        $(OL
            $(LI Lookup for unqualified names is change from one pass to two pass. The first
            pass goes through the scopes but does not check import declarations. If not found,
            the second pass goes through the scopes and only looks at import declarations.
            )
            $(LI Qualified name lookups, base class lookups, and WithStatement lookups no longer
            search import declarations, unless a module is the subject of the lookup, where the
            behavior remains as before.
            )
        )
    )

    $(P This can break existing code, although reliance on the previous behavior tends to be
    unintended, and fixing it improves the comprehensibility of the code. Breakage tends
    to take the form of a symbol now being flagged as undefined. Fixing the breakage can
    be done by fully qualifying the name, or adding an alias to the import declaration.)

    $(P Restore old behavior using the -transition=import compiler switch.)

    $(P See also $(BUGZILLA 10378))
    )
)

Macros:
    TITLE=Change Log

    BUGSTITLE = <div class="bugsfixed">$(H4 $1) $(OL $2 )</div>

    RELATIVE_LINK2=<a href="#$1">$+</a>
    LNAME2=<a class="anchor" title="Permalink to this section" id="$1" href="#$1">$+</a>

    STDMODREF = <a href="phobos/std_$1.html">$2</a>
    XREF = <a href="phobos/std_$1.html#$2">$2</a>
    CXREF = <a href="phobos/core_$1.html#$2">$2</a>

    BUGZILLA = <a href="https://issues.dlang.org/show_bug.cgi?id=$0">Bugzilla $0</a>
    PULL_REQUEST = $(LINK2 https://github.com/D-Programming-Language/$1/pull/$2, $1#$2)
    DMDPR = $(PULL_REQUEST dmd,$1)

    BOOKTABLE = <table><caption>$1</caption>$+</table>
