Suppress the "read-modify-write" error if type is a struct or a class

If a struct or class with shared type implements the opUnary or opOpAssign
operator then it is possible to perform "read-modify-write" operations
because the operator's implementation is supposed to perform atomic operations.

The purpose of this modification is to allow the creation of wrappers
(with structs or classes) to run atomic operations silently, for example:

---
shared struct Atomic {
    int a;

    int opUnary(string s)() if (s == "++")
    {
        import core.atomic : atomicOp;
        return atomicOp!"+="(a, 1);
    }
}

Atomic atomicvar;
atomicvar++; // Safe! Atomic struct implements opUnary
---
