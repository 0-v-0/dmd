Generated `opEquals` takes precedence over aliased this member `opEquals`

Before this patch, if a `struct` had an aliased this member that defined an
`opEquals` method, the aliased this `opEquals` would have been preferred
instead of the `struct` one:

---
struct A
{
    int a, b;
    bool opEquals(ref A rhs) const
    {
        return a == rhs.a && b == rhs.b;
    }
}

struct B
{
    int n;
    A a;
    alias a this;
}

void main()
{
    B a, b;
    assert(a == b);    // rewritten to a.a.opEquals(b.a)
}
---

Although the compiler generates an `opEquals` for `struct B` that does member-wise
equality comparison (`==`), the aliased this one is wrongfully preferred.

This patch corrects this issue by always choosing the defined `opEquals` (even if it is
generated by the compiler) instead of the alias this one. If the behavior prior to this
patch is desired, an explicit `opEquals` needs to be provided.

References:
[1] https://issues.dlang.org/show_bug.cgi?id=16657
[2] https://github.com/dlang/dmd/pull/9289
[3] https://github.com/dlang/dlang.org/pull/2593
