Added support for mangling C++'s GNU ABI tags

GNU ABI tags are a feature that was added with C++11 in $(LINK2 https://gcc.gnu.org/gcc-5/changes.html#libstdcxx, GCC 5.1).
In order for D to fully support the $(LINK2 http://www.cplusplus.com/reference/, standard C++ library),
DMD now recognize the special UDA `gnuAbiTag`, declared in `core.attribute` and publicly aliased in `object`
(so one need not import anything to use it).
The ABI tags are a low level feature that most user will not need to interact with,
but can be used to bind to C++ libraries that need it.
In particular, it is required to bind $(LINK2 http://www.cplusplus.com/reference/string/, `std::string`)
when targeting C++11 and higher (DMD switch `-extern-std={c++11,c++14,c++17}`).

It can be used in the following way:
---
extern(C++):
@gnuAbiTag("tagOnStruct")
struct MyStruct {}
@gnuAbiTag("Multiple", "Tags", "On", "Function")
MyStruct func();
---

Only one `gnuAbiTag` can be present on a symbol at a time.
The order of the array entries does not matter (they are sorted on output).
The UDA will only have an effect if `-extern-std=c++11` or higher is passed
to the compiler. The default (`-extern-std=c++98`) will ignore the UDA.
This UDA can only be applied to `extern(C++)` symbols and cannot be applied to namespaces.
