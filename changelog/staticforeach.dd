Implement DIP 1010 - $(LINK2 https://github.com/dlang/DIPs/blob/master/DIPs/DIP1010.md, Static foreach)

Support for `static foreach` has been added.

`static foreach` is a conditional compilation construct that is to `foreach` what `static if` is to `if`.
It is a convenient way to generate declarations and statements by iteration.

---
import std.conv: to;

static foreach(i; 0 .. 10)
{

    // a `static foreach` body does not introduce a nested scope
    // (similar to `static if`).
    
    // The following mixin declaration is at module scope:
    mixin(`enum x` ~ to!string(i) ~ ` = i;`); // declares 10 variables x0, x1, ..., x9
}

import std.range: iota;
// all aggregate types that can be iterated with a standard `foreach`
// loop are also supported by static foreach:
static foreach(i; iota(10))
{
    // we access the declarations generated in the first `static foreach`
    pragma(msg, "x", i, ": ", mixin(`x` ~ to!string(i)));
    static assert(mixin(`x` ~ to!string(i)) == i);
}

void main()
{
    import std.conv: text;
    import std.typecons: tuple;
    import std.algorithm: map;
    import std.stdio: writeln;

    // `static foreach` has both declaration and statement forms
    // (similar to `static if`).
    
    static foreach(x; iota(3).map!(i => tuple(text("x", i), i)))
    {
        // generates three local variables x0, x1 and x2.
        mixin(text(`int `,x[0],` = x[1];`));

        scope(exit) // this is within the scope of `main`
        {
            writeln(mixin(x[0]));
        }
    }
    
    writeln(x0," ",x1," ",x2); // first runtime output
}
---
