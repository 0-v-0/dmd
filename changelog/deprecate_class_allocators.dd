Class allocators and deallocators have been deprecated

Class allocators and deallocators have been planned for deprecation for years.  Starting with this release the following code will emit deprecation messages.

---
class C
{
    new(size_t size)         // deprecation message
    {
        return malloc(size);
    }

    delete(void* obj)        // deprecation message
    {
        free(obj);
    }
}
---

For more information see https://dlang.org/deprecate.html#Class%20allocators%20and%20deallocators

Many alternatives for class allocators/deallcators exist. Among them is the generic $(REF make, std,experimental,allocator) and $(REF dispose, std,experimental,allocator) from the allocator package. For other alternatives, see $(LINK2 https://dlang.org/blog/the-gc-series, the recent article about memory allocation on the DBlog) and $(LINK2 https://wiki.dlang.org/Memory_Management, the D Wiki memory management article).

Users have leveraged allocators in order to disable GC allocation, as illustrated in the following example:

---
class C
{
    @disable new(size_t size);
}

void main()
{
    auto c = new C();  // Error: allocator `new` is not callable because it is annotated with `@disable`
}
---

That idiom will remain, but has been enhanced with this release to no longer require the `size_t` argument.  That is, starting with this release, the following syntax is also permitted:

---
class C
{
    @disable new();
}

void main()
{
    auto c = new C();  // Error: allocator `new` is not callable because it is annotated with `@disable`
}
---
