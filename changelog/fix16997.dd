fix Issue 16997 - Integral promotion rules not being followed for unary + - ~ operators

To follow the C integral promotion rules, types are promoted to `int` before the unary
+ - or ~ operators are applied. Existing D does not do this.

This is corrected when one of the following command line switches are used:

    -transition=intpromote
    -transition=16997

It affects operands of type `byte`, `ubyte`, `short`, `ushort`, `char`, and `wchar`.
The operands are promoted to `int` before the operator is applied. The result
type will now be `int`.

The values computed will be different for some values of the operands:

* All values of - and ~ applied to ubyte, ushort, char, and dchar operands will change.

* The values of `-byte(-128)` and `-short(-32768)` will change.

If one of the '-transition=' switches is not specified, and warnings are turned on,
a warning will be emitted for these operations. To turn off the warning and work
as desired with or without the '-transition=' switch:

Option 1:

Rewrite `op b` as `op int(b)` to use correct, i.e. C-like, behavior.

Option 2:

Rewrite `op b` as `typeof(b)(op int(b))` to preserve the old behavior.

Eventually, the warning will become a deprecation, then an error, and then the C-like behavior
will become the default.
