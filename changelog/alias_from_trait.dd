Aliases can be created directly from a `__trait`.

Previously an `AliasSeq` was necessary in order to declare an alias based on a `__trait`.
Now the grammar allows to write shorter declarations:

---
struct Foo
{
    int a;
}

alias oldWay = AliasSeq!(__traits(getMember, Foo, "a"))[0];
alias newWay = __traits(getMember, Foo, "a");
---

To permit this it was more interesting to include `__trait` in the basic types
instead of just changing the alias syntax, so as bonus,
a new way of declaring the variables exists:

---
struct Foo { static struct Bar {} }
const(__traits(getMember, Foo, "Bar")) fooBar;
static assert(is(typeof(fooBar) == const(Foo.Bar)));
---

Despite of being a type from the syntax point of view and when used specifically for an `alias`
the `getMember` trait can also represent symbols or even imports.
This does not change the alias semantic since for example the same distinction
was already done in case of an identifier chain.
